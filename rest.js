(() => {
  const urlApi = new URLSearchParams(location.search).get('api');
  if (urlApi) localStorage.setItem('foody_api', urlApi);
  const API = urlApi || localStorage.getItem('foody_api') || 'http://localhost:8000';
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('a[href$="onboarding.html"]').forEach(a => a.href = `./onboarding.html?api=${encodeURIComponent(API)}`);
  });
  const $ = (id)=>document.getElementById(id);
  const els = { restInfo:$('restInfo'), loginBtn:$('loginBtn'), logoutBtn:$('logoutBtn'),
    createForm:$('createForm'), title:$('title'), desc:$('desc'), price:$('price'), qty:$('qty'), expires:$('expires'), photo:$('photo'),
    offers:$('offers'), empty:$('empty'), search:$('search'), resTable:document.querySelector('#resTable tbody'),
    resFilter:$('resFilter'), resEmpty:$('resEmpty'), addFloating:$('addFloating'), profileBanner:$('profileBanner'),
    settingsBtn:$('settingsBtn'), settingsModal:$('settingsModal'), restSelect:$('restSelect'), newRestName:$('newRestName'), createRestBtn:$('createRestBtn'), saveSettings:$('saveSettings') };
  let restaurant = null; try{ restaurant = JSON.parse(localStorage.getItem('foody_restaurant')||'null'); }catch{}
  const toast=(m)=>{let t=document.getElementById('toast'); if(!t){t=document.createElement('div'); t.id='toast'; t.className='toast'; document.body.appendChild(t);} t.textContent=m; t.classList.remove('hidden'); setTimeout(()=>t.classList.add('hidden'),2000);};
  const fmt=(s)=>new Date(s).toLocaleString('ru-RU',{hour:'2-digit',minute:'2-digit',day:'2-digit',month:'2-digit'});
  const money=(v)=>new Intl.NumberFormat('ru-RU').format(v)+' ₽';
  async function whoami(){ const u=window.Telegram?.WebApp?.initDataUnsafe?.user; if(!u) throw 0; const r=await fetch(`${API}/whoami?telegram_id=${u.id}`); if(!r.ok) throw 0; return r.json(); }
  async function checkProfile(){ try{ const r=await fetch(`${API}/restaurant/${restaurant.id}`); if(!r.ok) throw 0; const p=await r.json(); els.restInfo.textContent=`Вы вошли как: ${restaurant.name}${p.city?`, ${p.city}`:''} (id ${restaurant.id})`; els.profileBanner.style.display = (p.phone && p.address && p.city)?'none':'flex'; }catch{ els.restInfo.textContent=`Ресторан id ${restaurant?.id||'—'}`; } }
  function renderOffers(items){ els.offers.innerHTML=''; let arr=items; const q=(els.search.value||'').toLowerCase(); if(q) arr=arr.filter(o=>(o.title||'').toLowerCase().includes(q)); if(!arr.length){ els.empty.classList.remove('hidden'); return;} els.empty.classList.add('hidden');
    for(const o of arr){ const img=o.photo_url?`<div style="margin:6px 0"><img src="${o.photo_url}" style="width:100%;max-height:160px;object-fit:cover;border-radius:12px"/></div>`:'';
      const card=document.createElement('div'); card.className='card-item'; card.innerHTML=`<div><b>${o.title}</b></div>${img}<div class="meta">До: ${fmt(o.expires_at)} • Остаток: ${o.quantity}</div><div><b>${money(o.price)}</b></div><div class="actions"><button class="btn" data-edit="${o.id}">Редактировать</button><button class="btn" data-del="${o.id}">Удалить</button></div>`;
      card.querySelector('[data-edit]').onclick=()=>openEdit(o); card.querySelector('[data-del]').onclick=()=>delOffer(o.id); els.offers.appendChild(card);} }
  async function loadOffers(){ try{ const r=await fetch(`${API}/offers`); const list=await r.json(); const my=restaurant?.id?list.filter(o=>o.restaurant_id===restaurant.id):[]; renderOffers(my);}catch{ toast('Ошибка загрузки офферов'); } }
  async function delOffer(id){ if(!confirm('Удалить предложение?')) return; try{ const r=await fetch(`${API}/offers/${id}`,{method:'DELETE'}); if(r.ok){ toast('Удалено'); loadOffers(); } else toast('Не удалось удалить'); }catch{ toast('Ошибка сети'); } }
  const modal=$('editModal'); const eId=$('editId'), eTitle=$('editTitle'), eDesc=$('editDesc'), ePrice=$('editPrice'), eQty=$('editQty'), eExp=$('editExpires'), ePhoto=$('editPhoto');
  function openEdit(o){ eId.value=o.id; eTitle.value=o.title||''; eDesc.value=o.description||''; ePrice.value=o.price; eQty.value=o.quantity; try{ eExp.value=new Date(o.expires_at).toISOString().slice(0,16);}catch{} ePhoto.value=''; modal.showModal(); }
  async function uploadVia(file){ if(!file) return null; try{ const init=await fetch(`${API}/upload_init`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({filename:file.name,content_type:file.type||'image/jpeg'})}); if(init.ok){ const d=await init.json(); const put=await fetch(d.upload_url,{method:'PUT',headers:d.headers||{'Content-Type':file.type||'image/jpeg'},body:file}); if(!put.ok) throw 0; return d.public_url; } }catch(e){}
    try{ const fd=new FormData(); fd.append('file',file); const r=await fetch(`${API}/upload`,{method:'POST',body:fd}); const d=await r.json(); if(d.url) return d.url; }catch(e){} toast('Фото не загружено'); return null; }
  document.getElementById('editForm').addEventListener('submit', async (ev)=>{ ev.preventDefault(); const id=Number(eId.value); const payload={ title:eTitle.value.trim()||undefined, description:eDesc.value.trim()||undefined, price:ePrice.value?Number(ePrice.value):undefined, quantity:eQty.value?Number(eQty.value):undefined, expires_at:eExp.value?new Date(eExp.value).toISOString():undefined }; if(ePhoto.files&&ePhoto.files[0]){ const url=await uploadVia(ePhoto.files[0]); if(url) payload.photo_url=url; } try{ const r=await fetch(`${API}/offers/${id}`,{method:'PATCH',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)}); if(r.ok){ toast('Сохранено'); modal.close(); loadOffers(); } else { toast('Ошибка'); } }catch{ toast('Ошибка сети'); } });
  async function uploadCreate(){ const f=els.photo?.files?.[0]; if(!f) return null; return await uploadVia(f); }
  els.createForm.addEventListener('submit', async (ev)=>{ ev.preventDefault(); if(!restaurant?.id) return toast('Нет ресторана'); const photo_url=await uploadCreate(); const payload={ restaurant_id:restaurant.id, title:els.title.value.trim(), description:els.desc.value.trim()||null, price:Number(els.price.value), quantity:Number(els.qty.value), expires_at:els.expires.value?new Date(els.expires.value).toISOString():null, photo_url:photo_url||null };
    try{ const r=await fetch(`${API}/offers`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)}); if(r.ok){ toast('Добавлено'); els.createForm.reset(); loadOffers(); } else { toast('Ошибка'); } }catch{ toast('Ошибка сети'); } });
  async function loadReservations(){ if(!els.resTable) return; try{ const r=await fetch(`${API}/restaurant_reservations/${restaurant.id}`); const list=await r.json(); const tbody=els.resTable; tbody.innerHTML=''; let arr=list; const f=els.resFilter.value; if(f!=='all') arr=arr.filter(x=>x.status===f); if(!arr.length){ els.resEmpty.classList.remove('hidden'); } else { els.resEmpty.classList.add('hidden'); for(const x of arr){ const tr=document.createElement('tr'); tr.innerHTML=`<td>${x.code}</td><td>${x.offer_title}</td><td>${x.buyer_name||'—'}</td><td>${x.status}</td><td>${fmt(x.expires_at)}</td><td>${fmt(x.created_at)}</td>`; tbody.appendChild(tr);} } }catch{} }
  async function populateRestList(){ const u=window.Telegram?.WebApp?.initDataUnsafe?.user; els.restSelect.innerHTML=''; if(!restaurant && u){ try{ const d=await whoami(); restaurant={id:d.restaurant_id,name:d.restaurant_name}; }catch{} } if(restaurant?.id){ const opt=document.createElement('option'); opt.value=restaurant.id; opt.textContent=`${restaurant.name} (id ${restaurant.id})`; opt.selected=true; els.restSelect.appendChild(opt); }
    if(!u) return; try{ const r=await fetch(`${API}/my_restaurants?telegram_id=${u.id}`); const list=await r.json(); for(const x of list){ const exists=Array.from(els.restSelect.options).some(o=>Number(o.value)===x.id); if(!exists){ const opt=document.createElement('option'); opt.value=x.id; opt.textContent=`${x.restaurant_name} (id ${x.id})`; els.restSelect.appendChild(opt);} } }catch{} }
  async function openSettings(){ await populateRestList(); els.settingsModal.showModal(); }
  els.createRestBtn.classList.add('primary');
  els.createRestBtn.addEventListener('click', async ()=>{ const name=(els.newRestName.value||'').trim()||'Мой ресторан'; const u=window.Telegram?.WebApp?.initDataUnsafe?.user; if(!u) return toast('Откройте из Telegram'); try{ const r=await fetch(`${API}/register_telegram?force_new=true`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name,telegram_id:String(u.id)})}); const d=await r.json(); if(r.ok){ restaurant={id:d.restaurant_id,name:d.restaurant_name}; localStorage.setItem('foody_restaurant',JSON.stringify(restaurant)); await fetch(`${API}/set_active_restaurant?telegram_id=${u.id}&restaurant_id=${restaurant.id}`,{method:'POST'}); toast('Создан и выбран активным'); els.settingsModal.close(); await reloadAll(); } else toast('Не удалось создать'); }catch{ toast('Ошибка сети'); } });
  els.saveSettings.addEventListener('click', async ()=>{ const u=window.Telegram?.WebApp?.initDataUnsafe?.user; const rid=parseInt(els.restSelect.value||'0',10); if(!u||!rid){ els.settingsModal.close(); return;} try{ await fetch(`${API}/set_active_restaurant?telegram_id=${u.id}&restaurant_id=${rid}`,{method:'POST'}); const label=els.restSelect.options[els.restSelect.selectedIndex].textContent; restaurant={id:rid,name:label.split(' (id')[0]}; localStorage.setItem('foody_restaurant',JSON.stringify(restaurant)); toast('Активный ресторан обновлён'); els.settingsModal.close(); await reloadAll(); }catch{ toast('Ошибка сети'); } });
  els.logoutBtn.addEventListener('click', ()=>{ localStorage.removeItem('foody_restaurant'); location.reload(); });
  els.loginBtn.addEventListener('click', async ()=>{ try{ const d=await whoami(); restaurant={id:d.restaurant_id,name:d.restaurant_name}; localStorage.setItem('foody_restaurant',JSON.stringify(restaurant)); const u=window.Telegram?.WebApp?.initDataUnsafe?.user; if(u){ try{ const r=await fetch(`${API}/my_restaurants?telegram_id=${u.id}`); const list=await r.json(); if(Array.isArray(list)&&list.length>1){ await populateRestList(); els.settingsModal.showModal(); } }catch{} } await reloadAll(); }catch{ openSettings(); } });
  document.getElementById('search').addEventListener('input', ()=>loadOffers());
  document.getElementById('resFilter').addEventListener('change', ()=>loadReservations());
  document.getElementById('addFloating').addEventListener('click', ()=>{ window.scrollTo({top:0,behavior:'smooth'}); document.getElementById('title').focus(); });
  document.getElementById('settingsBtn').addEventListener('click', openSettings);
  async function reloadAll(){ await Promise.all([checkProfile(), loadOffers(), loadReservations()]); }
  (async ()=>{ if(restaurant?.id){ await reloadAll(); return; } try{ const d=await whoami(); restaurant={id:d.restaurant_id,name:d.restaurant_name}; localStorage.setItem('foody_restaurant',JSON.stringify(restaurant)); await reloadAll(); }catch{ els.restInfo.textContent='Нет привязки к ресторану. Откройте «Настройки», создайте или выберите ресторан.'; els.loginBtn.style.display='inline-flex'; } })();
})();